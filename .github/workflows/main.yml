# 工作流程的名稱
name: Deploy to Cloud Run

# 觸發條件：當有程式碼推送到 main 分支時
on:
  push:
    branches:
      - main

# 環境變數，方便在整個工作流程中重複使用
env:
  GAR_LOCATION: asia-east1 # Google Artifact Registry 的位置，例如 asia-east1 (台灣)
  SERVICE_NAME: food-search-api # 您在 Cloud Run 上的服務名稱
  REGION: asia-east1 # 您 Cloud Run 服務的區域
  PROJECT_ID: modular-buffer-467407-i0 # 直接寫死專案 ID

jobs:
  deploy:
    # 指定此工作在最新的 Ubuntu 環境中運行
    runs-on: ubuntu-latest
    
    # 授予 GitHub Actions 寫入 Google Cloud 的權限
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # 步驟 1: 從 GitHub 倉庫中取得您的程式碼
      - name: Checkout
        uses: actions/checkout@v4

      # 步驟 2: 使用服務帳戶金鑰 (Service Account Key) 進行 GCP 驗證
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 步驟 3: 設定 gcloud CLI
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # ★★★ 新增的最終驗證步驟 ★★★
      # 這個步驟會明確地檢查金鑰所屬的專案是否與您指定的專案 ID 一致
      - name: 'Debug: Verify Authenticated Project'
        run: |
          echo "--- 正在驗證 GCP 專案 ID ---"
          # 從金鑰中提取服務帳戶 Email
          SA_EMAIL=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r .client_email)
          echo "使用的服務帳戶 Email: $SA_EMAIL"
          
          # 取得 gcloud 驗證後設定的專案 ID
          AUTH_PROJECT_ID=$(gcloud config get-value project)
          echo "金鑰所屬的專案 ID: $AUTH_PROJECT_ID"
          
          # 取得工作流程中寫死的專案 ID
          TARGET_PROJECT_ID="${{ env.PROJECT_ID }}"
          echo "目標專案 ID: $TARGET_PROJECT_ID"
          
          # 比較兩者是否一致
          if [ "$AUTH_PROJECT_ID" != "$TARGET_PROJECT_ID" ]; then
            echo "::error::嚴重錯誤：金鑰所屬的專案 ($AUTH_PROJECT_ID) 與目標專案 ($TARGET_PROJECT_ID) 不符。請確認您的 GCP_SA_KEY Secret 是否來自正確的 GCP 專案。"
            exit 1
          else
            echo "✅ 專案 ID 驗證成功。"
          fi
          echo "---------------------------------"

      # 步驟 4: 將 Docker 相關操作合併為一個步驟
      - name: Build and Push Docker Image
        id: build-and-push
        run: |
          # 組合完整的映像檔名稱
          IMAGE_TAG="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "組合後的映像檔名稱為: ${IMAGE_TAG}"

          # 授權 Docker
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
          
          # 建置映像檔
          docker build -t $IMAGE_TAG .
          
          # 推送映像檔
          docker push $IMAGE_TAG

      # 步驟 5: 部署新的映像檔至 Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          # 從上一步的輸出中讀取完整的映像檔名稱
          image: ${{ steps.build-and-push.outputs.IMAGE_TAG }}
          env_vars: |
            AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
            AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
            AZURE_OPENAI_EMBEDDING_DEPLOYMENT=${{ secrets.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}
            AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }}
            QDRANT_URL=${{ secrets.QDRANT_URL }}
            QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}
            DB_TYPE=${{ secrets.DB_TYPE }}
            DB_DRIVER=${{ secrets.DB_DRIVER }}
            DB_SERVER=${{ secrets.DB_SERVER }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_UID=${{ secrets.DB_UID }}
            DB_PWD=${{ secrets.DB_PWD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_MYSQL_PASSWORD=${{ secrets.DB_MYSQL_PASSWORD }}
            DB_MYSQL_NAME=${{ secrets.DB_MYSQL_NAME }}

      # 步驟 6: 輸出部署後的服務網址
      - name: Show Output
        run: echo "Successfully deployed to ${{ steps.deploy.outputs.url }}"
